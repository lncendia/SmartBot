using System.Diagnostics.CodeAnalysis;
using SmartBot.Abstractions.Enums;
using SmartBot.Abstractions.Models.Reports;
using SmartBot.Abstractions.Models.WorkingChats;

namespace SmartBot.Abstractions.Models.Users;

/// <summary>
/// Модель пользователя системы отчетности
/// </summary>
/// <remarks>
/// Основная сущность, содержащая информацию о пользователе и его состоянии в системе.
/// Хранит как персональные данные, так и рабочую контекстную информацию.
/// </remarks>
public class User
{
    /// <summary>
    /// Уникальный идентификатор пользователя в Telegram
    /// </summary>
    /// <value>
    /// Положительное число, соответствующее user_id в Telegram API
    /// </value>
    public required long Id { get; init; }

    /// <summary>
    /// Полное имя пользователя (ФИО)
    /// </summary>
    /// <value>
    /// Строка в формате "Фамилия Имя Отчество". Может быть null до завершения регистрации.
    /// </value>
    public string? FullName { get; set; }

    /// <summary>
    /// Должность/позиция пользователя в компании
    /// </summary>
    /// <value>
    /// Например: "Менеджер по продажам", "Разработчик Python". Может быть null.
    /// </value>
    public string? Position { get; set; }

    /// <summary>
    /// Дата и время регистрации пользователя в системе
    /// </summary>
    /// <value>
    /// UTC время. Заполняется автоматически при создании пользователя.
    /// </value>
    public DateTime RegistrationTime { get; init; } = DateTime.UtcNow;

    /// <summary>
    /// Текущее состояние пользователя в системе
    /// </summary>
    /// <value>
    /// Определяет доступные действия и ожидаемый ввод от пользователя.
    /// По умолчанию: Ожидание ввода ФИО (первый шаг регистрации).
    /// </value>
    public State State { get; set; } = State.AwaitingFullNameInput;

    /// <summary>
    /// Роль пользователя в системе
    /// </summary>
    /// <value>
    /// Определяет уровень доступа и функциональные возможности.
    /// По умолчанию: Сотрудник (базовые права).
    /// </value>
    public Role Role { get; set; } = Role.Employee;

    /// <summary>
    /// Идентификатор рабочего чата пользователя
    /// </summary>
    /// <value>
    /// ID чата, в котором пользователь отправляет отчеты.
    /// Null означает, что чат не назначен.
    /// </value>
    public long? WorkingChatId { get; set; }

    /// <summary>
    /// Рабочий чат пользователя
    /// </summary>
    /// <value>
    /// Навигационное свойство
    /// </value>
    public WorkingChat? WorkingChat { get; init; }

    /// <summary>
    /// Флаг, указывающий наличие административных прав
    /// </summary>
    /// <value>
    /// true - пользователь имеет права Admin или TeleAdmin
    /// false - обычный сотрудник или заблокированный пользователь
    /// </value>
    public bool IsAdmin => Role is Role.Admin or Role.TeleAdmin;

    /// <summary>
    /// Флаг, указывающий статус сотрудника
    /// </summary>
    /// <value>
    /// true - пользователь является сотрудником (Employee или TeleAdmin)
    /// false - администратор или заблокированный пользователь
    /// </value>
    public bool IsEmployee => Role is Role.Employee or Role.TeleAdmin;

    /// <summary>
    /// Контекст проверки отчета (для администраторов)
    /// </summary>
    /// <value>
    /// Содержит информацию о проверяемом отчете.
    /// Null - нет активной проверки.
    /// </value>
    public ReviewingReport? ReviewingReport { get; set; }

    /// <summary>
    /// Временный идентификатор чата для назначения (администраторский функционал)
    /// </summary>
    /// <value>
    /// ID чата, выбранного администратором для назначения пользователю.
    /// Используется в процессе настройки рабочего пространства.
    /// </value>
    public long? SelectedWorkingChatId { get; set; }

    /// <summary>
    /// Контекст ответа на сообщение
    /// </summary>
    /// <value>
    /// Содержит информацию о сообщении, на которое пользователь отвечает.
    /// Null - нет активного ответа.
    /// </value>
    public AnswerFor? AnswerFor { get; set; }

    /// <summary>
    /// Контекст текущего отчёта
    /// </summary>
    /// <value>
    /// Содержит информацию о текущем введенном отчёте пользователя.
    /// Null - нет введенного отчёта.
    /// </value>
    public string? CurrentReport { get; set; }

    /// <summary>
    /// Коллекция отчетов пользователя
    /// </summary>
    /// <value>
    /// Навигационное свойство для доступа ко всем отчетам пользователя.
    /// Автоматически инициализируется пустым списком.
    /// </value>
    [SuppressMessage("ReSharper", "CollectionNeverUpdated.Global")]
    public List<Report> Reports { get; init; } = [];

    /// <summary>
    /// Текущий рейтинговый счет пользователя.
    /// Начисляется за качественные отчеты и активность.
    /// </summary>
    public double Score { get; set; }

    /// <summary>
    /// Возвращает количество очков, недостающих до следующего звания.
    /// </summary>
    /// <returns>
    /// Количество очков до следующего уровня.
    /// 0 если уже максимальное звание.
    /// </returns>
    public double PointsToNextRank => Score switch
    {
        < 20 => 20 - Score,
        >= 4000 => 0,
        _ => GetDifferenceToNext50(Score)
    };

    /// <summary>
    /// Вычисляет разницу между переданным числом и ближайшим большим числом, кратным 50.
    /// </summary>
    /// <param name="num">Исходное число типа double.</param>
    /// <returns>
    /// Возвращает положительную разницу между числом и следующим кратным 50.
    /// Если число уже кратно 50, возвращает 0.
    /// </returns>
    private static double GetDifferenceToNext50(double num)
    {
        // Вычисляем остаток от деления числа на 50
        var remainder = num % 50;
    
        // Если остаток равен 0, значит число уже кратно 50 → возвращаем 0
        if (remainder == 0) 
            return 0;
    
        // Иначе возвращаем разницу между 50 и остатком
        return 50 - Math.Abs(remainder);
    }

    /// <summary>
    /// Текущее звание пользователя на основе набранных очков.
    /// </summary>
    public string Rank => Score switch
    {
        < 20 => "👶 Ученик дел",
        < 50 => "🌟 Стажёр светлого пути",
        < 100 => "👣 Первый шагатель",
        < 150 => "📝 Обыватель задач",
        < 200 => "🔍 Табличный искатель",
        < 250 => "😄 Нулевой, но с задором",
        < 300 => "⏱️ Подмастерье дедлайнов",
        < 350 => "✅ Герой первой галочки",
        < 400 => "⚔️ Начинающий сражатель с задачами",
        < 450 => "☕ Победитель утреннего кофе",
        < 500 => "✔️ Мастер выполненных пунктов",
        < 550 => "🎯 Успешный закрыватель задач",
        < 600 => "🗓️ Планировщик дня",
        < 650 => "🏁 Специалист по завершению дел",
        < 700 => "⏰ Снайпер по дедлайнам",
        < 750 => "📈 Создатель прогресса",
        < 800 => "🧪 Командный алхимик",
        < 850 => "🔄 Боец рутины",
        < 900 => "🌞 Добрый день-доводитель",
        < 950 => "🔔 Победитель уведомлений",
        < 1000 => "👑 Повелитель рабочего дня",
        < 1050 => "🛡️ Командный паладин",
        < 1100 => "🎖️ Закрывающий с честью",
        < 1150 => "♟️ Стратег будней",
        < 1200 => "⏳ Мастер тайм-менеджмента",
        < 1250 => "🎯 Страж фокуса",
        < 1300 => "📊 Хроникёр продуктивности",
        < 1350 => "🦸 Порядочный герой",
        < 1400 => "📋 Управляющий сводками",
        < 1450 => "🧘 Спокойный завершатель",
        < 1500 => "🏆 Мастер делового фронта",
        < 1550 => "📜 Полководец отчётов",
        < 1600 => "✨ Завершатель безупречный",
        < 1650 => "🌍 Координатор мира и задач",
        < 1700 => "🐉 Командный дракон",
        < 1750 => "🎣 Ловец завершёнки",
        < 1800 => "✅ Главный по «Готово!»",
        < 1850 => "🎓 Эффективный магистр",
        < 1900 => "🏅 Руководитель внутренней победы",
        < 1950 => "💪 Уверенный герой прогресса",
        < 2000 => "🏗️ Архитектор продуктивности",
        < 2050 => "📖 Писатель великих отчётов",
        < 2100 => "⚡ Ударник света",
        < 2150 => "🌀 Рабочий шаман",
        < 2200 => "🤫 Рыцарь тишины и порядка",
        < 2250 => "⚖️ Профи вечернего баланса",
        < 2300 => "✏️ Главный вдохновитель списка дел",
        < 2350 => "🧘‍♂️ Повелитель покоя",
        < 2400 => "💫 Хранитель продуктивного духа",
        < 2450 => "🥇 Грандмастер рабочего ритма",
        < 2500 => "📚 Легенда офисной саги",
        < 2550 => "😌 Спокойный бог завершённого дня",
        < 2600 => "🔇 Повелитель беззвучных чатов",
        < 2650 => "📊 Легендарный табличный мастер",
        < 2700 => "🗄️ Архиватор великих свершений",
        < 2750 => "🧠 Чистый разум продуктивности",
        < 2800 => "🏆 Собиратель триумфов",
        < 2850 => "✅ Тот, кто завершает всё",
        < 2900 => "🌙 Хранитель вечернего покоя",
        < 2950 => "💪 Сильнейший из работающих",
        < 3000 => "🥇 Победитель одного таска",
        < 3050 => "📋 Оживший To-Do List",
        < 3100 => "🐛 Гладиатор багов",
        < 3150 => "🔄 Чемпион по переключению вкладок",
        < 3200 => "❌ Повелитель вкладки «закрыть всё»",
        < 3250 => "💻 Магистр выживания в зуме",
        < 3300 => "💡 Рыцарь светлой головы",
        < 3350 => "🛡️ Неуязвимый после дедлайна",
        < 3400 => "💃 Танцор между встречами",
        < 3450 => "😎 Победитель понедельника",
        < 3500 => "🎉 Властелин пятничного настроя",
        < 3550 => "🧘 Хранитель ясного ума",
        < 3600 => "🛡️ Защитник от перегорания",
        < 3650 => "✉️ Дипломат переписок",
        < 3700 => "🤹 Жонглёр приоритетами",
        < 3750 => "✅ Сталкер закрытых задач",
        < 3800 => "🍳 Повар идеальных решений",
        < 3850 => "🤫 Тихий герой команды",
        < 3900 => "🛡️ Защитник «ещё одного таска»",
        < 3950 => "🧱 Эмоциональный танк",
        < 4000 => "🎤 Бард хороших новостей",
        _ => "🌟 Командный луч света"
    };
}